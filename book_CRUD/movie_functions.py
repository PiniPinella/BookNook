from fastapi import FastAPI, HTTPException, APIRouter
from typing import List
import sqlite3

#### self made 
from helper_functions import get_book_connection, row_to_movie
from classes import Movie

#### connect router via API 
movie_router = APIRouter(prefix="/movies")

@movie_router.get("/movies", response_model=List[Movie])
def get_all_movies():
    """Returns all movies from the database"""
    conn = get_book_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM movie")
        return [row_to_movie(row) for row in cursor.fetchall()]
    finally:
        conn.close()  

@movie_router.get("/movies/{id}", response_model=Movie)
def get_movie(id: int):
    """Returns a specific movie via ID"""
    conn = get_book_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM movie WHERE id = ?", (id,))
        movie = cursor.fetchone()
        if not movie:
            raise HTTPException(status_code=404, detail="Film nicht gefunden")
        return row_to_movie(movie)
    finally:
        conn.close()


@movie_router.post("", response_model=Movie, status_code=201)
def add_movie(movie: Movie):
    """Adds a movie (autogenerated ID)"""
    conn = get_book_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO movie (
                title, producer, release_year, price, in_stock
            ) VALUES (?, ?, ?, ?, ?)
        """, (
            movie.title, movie.producer, movie.release_year, movie.price, movie.in_stock
        ))
        conn.commit()
        
        # fetch new ID
        new_id = cursor.lastrowid
        
        # fetch all data
        cursor.execute("SELECT * FROM movie WHERE id = ?", (new_id,))
        new_movie = cursor.fetchone()
        
        if not new_movie:
            raise HTTPException(status_code=500, detail="Unable to add the movie")
            
        return row_to_movie(new_movie)
        
    except sqlite3.Error as e:
        raise HTTPException(status_code=400, detail=f"Database Error: {str(e)}")
    finally:
        conn.close()


@movie_router.put("/{id}", response_model=Movie)
def update_movie(id: int, updated_movie: Movie):
    """Updates a movie (full input necessary)"""
    conn = get_book_connection()
    try:
        cursor = conn.cursor()
        
        # checks if movie exists
        cursor.execute("SELECT id FROM movie WHERE id = ?", (id,))
        if not cursor.fetchone():
            raise HTTPException(status_code=404, detail="movie not found")
        
        # full update
        cursor.execute("""
            UPDATE movie SET
                title = ?,
                author = ?,
                release_year = ?,
                editor = ?,
                page_count = ?,
                price = ?,
                in_stock = ?
            WHERE id = ?
        """, (
            updated_movie.title,
            updated_movie.author,
            updated_movie.release_year,
            updated_movie.editor,
            updated_movie.page_count,
            updated_movie.price,
            updated_movie.in_stock,
            id  # WHERE-clause
        ))
        conn.commit()
        
        return updated_movie
    
    except sqlite3.Error as e:
        raise HTTPException(status_code=400, detail=f"Database Error: {str(e)}")
    finally:
        conn.close()

@movie_router.delete("/movies/{id}", status_code=204)
def delete_movie(id: int):
    """Deletes a specific movie via ID"""
    conn = get_book_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM movie WHERE id = ?", (id,))
        conn.commit()
    finally:
        conn.close()