from fastapi import FastAPI, HTTPException, APIRouter
from typing import List
import sqlite3

#### self made 
from helper_functions import get_book_connection, row_to_book
from classes import Book

#### connect router via API 
book_router = APIRouter(prefix="/books")

@book_router.get("/books", response_model=List[Book])
def get_all_books():
    """Returns all books from the database"""
    conn = get_book_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM book")
        return [row_to_book(row) for row in cursor.fetchall()]
    finally:
        conn.close()  

@book_router.get("/books/{id}", response_model=Book)
def get_book(id: int):
    """Returns a specific book via ID"""
    conn = get_book_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM book WHERE id = ?", (id,))
        book = cursor.fetchone()
        if not book:
            raise HTTPException(status_code=404, detail="Book not found")
        return row_to_book(book)
    finally:
        conn.close()


@book_router.post("", response_model=Book, status_code=201)
def add_book(book: Book):
    """Adds a book (leave id on 0 , it's autogenerated)"""
    conn = get_book_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO book (
                title, author, release_year, 
                editor, page_count, price, in_stock
            ) VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (
            book.title, book.author, book.release_year,
            book.editor, book.page_count, book.price, book.in_stock
        ))
        conn.commit()
        
        # fetch new ID
        new_id = cursor.lastrowid
        
        # fetch all data
        cursor.execute("SELECT * FROM book WHERE id = ?", (new_id,))
        new_book = cursor.fetchone()
        
        if not new_book:
            raise HTTPException(status_code=500, detail="Unable to add book")
            
        return row_to_book(new_book)
        
    except sqlite3.Error as e:
        raise HTTPException(status_code=400, detail=f"Database Error: {str(e)}")
    finally:
        conn.close()


@book_router.put("/{id}", response_model=Book)
def update_book(id: int, updated_book: Book):
    """Updates a book (full input necessary)"""
    conn = get_book_connection()
    try:
        cursor = conn.cursor()
        
        # checks if book exists
        cursor.execute("SELECT id FROM book WHERE id = ?", (id,))
        if not cursor.fetchone():
            raise HTTPException(status_code=404, detail="Book not found")
        
        # full update
        cursor.execute("""
            UPDATE book SET
                title = ?,
                author = ?,
                release_year = ?,
                editor = ?,
                page_count = ?,
                price = ?,
                in_stock = ?
            WHERE id = ?
        """, (
            updated_book.title,
            updated_book.author,
            updated_book.release_year,
            updated_book.editor,
            updated_book.page_count,
            updated_book.price,
            updated_book.in_stock,
            id  # WHERE-clause
        ))
        conn.commit()
        
        return updated_book
        
    except sqlite3.Error as e:
        raise HTTPException(status_code=400, detail=f"Database Error: {str(e)}")
    finally:
        conn.close()


@book_router.delete("/books/{id}", status_code=204)
def delete_book(id: int):
    """Deletes a specific book via ID"""
    conn = get_book_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM book WHERE id = ?", (id,))
        conn.commit()
    finally:
        conn.close()