from fastapi import FastAPI, HTTPException, APIRouter
from typing import List
import sqlite3

#### self made 
from helper_functions import get_book_connection, row_to_ebook
from classes import Ebook

#### connect router via API 
ebook_router = APIRouter(prefix="/ebook")

@ebook_router.get("/ebooks", response_model=List[Ebook])
def get_all_ebooks():
    """Returns all books from the database"""
    conn = get_book_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM ebook")
        return [row_to_ebook(row) for row in cursor.fetchall()]
    finally:
        conn.close()  


@ebook_router.get("/ebooks/{id}", response_model=Ebook)
def get_ebook(id: int):
    """Returns a specific ebook via ID"""
    conn = get_book_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM ebook WHERE id = ?", (id,))
        ebook = cursor.fetchone()
        if not ebook:
            raise HTTPException(status_code=404, detail="Ebook nicht gefunden")
        return row_to_ebook(ebook)
    finally:
        conn.close()

@ebook_router.post("", response_model=Ebook, status_code=201)
def add_book(ebook: Ebook):
    """Adds an ebook (leave id on 0 , it's autogenerated)"""
    conn = get_book_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO ebook (
                title, author, release_year, 
                editor, page_count, price
            ) VALUES (?, ?, ?, ?, ?, ?)
        """, (
            ebook.title, ebook.author, ebook.release_year,
            ebook.editor, ebook.page_count, ebook.price
        ))
        conn.commit()
        
        # fetch new ID
        new_id = cursor.lastrowid
        
       # fetch all data
        cursor.execute("SELECT * FROM ebook WHERE id = ?", (new_id,))
        new_ebook = cursor.fetchone()
        
        if not new_ebook:
            raise HTTPException(status_code=500, detail="Unable to add the ebook")
            
        return row_to_ebook(new_ebook)
        
    except sqlite3.Error as e:
        raise HTTPException(status_code=400, detail=f"Database Error: {str(e)}")
    finally:
        conn.close()


@ebook_router.put("/{id}", response_model=Ebook)
def update_ebook(id: int, updated_ebook: Ebook):
    """Updates a ebook (full input necessary)"""
    conn = get_book_connection()
    try:
        cursor = conn.cursor()
        
        # checks if ebook exists
        cursor.execute("SELECT id FROM ebook WHERE id = ?", (id,))
        if not cursor.fetchone():
            raise HTTPException(status_code=404, detail="ebook not found")
        
        # full update
        cursor.execute("""
            UPDATE ebook SET
                title = ?,
                author = ?,
                release_year = ?,
                editor = ?,
                page_count = ?,
                price = ?
            WHERE id = ?
        """, (
            updated_ebook.title,
            updated_ebook.author,
            updated_ebook.release_year,
            updated_ebook.editor,
            updated_ebook.page_count,
            updated_ebook.price,
            id  # WHERE-clause
        ))
        conn.commit()
        
        return updated_ebook
        
    except sqlite3.Error as e:
        raise HTTPException(status_code=400, detail=f"Database Error: {str(e)}")
    finally:
        conn.close()

@ebook_router.delete("/ebooks/{id}", status_code=204)
def delete_ebook(id: int):
    """Deletes a specific ebook via ID"""
    conn = get_book_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM ebook WHERE id = ?", (id,))
        conn.commit()
    finally:
        conn.close()