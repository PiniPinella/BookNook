from fastapi import FastAPI, HTTPException, APIRouter
from typing import List
import sqlite3

#### self made 
from helper_functions import get_coffee_connection, row_to_apple_spritzer
from classes import Apple_Spritzer


#### connect router via API 
apple_spritzer_router = APIRouter(prefix="/apple_spritzer")

@apple_spritzer_router.get("/apple_spritzers", response_model=List[Apple_Spritzer])
def get_all_apple_spritzers():
    """Returns all apple_spritzers from the database"""
    conn = get_coffee_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM apple_spritzer")
        return [row_to_apple_spritzer(row) for row in cursor.fetchall()]
    finally:
        conn.close()  

@apple_spritzer_router.get("/apple_spritzers/{id}", response_model=Apple_Spritzer)
def get_apple_spritzer(id: int):
    """Returns a specific apple_spritzer via ID"""
    conn = get_coffee_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM apple_spritzer WHERE id = ?", (id,))
        apple_spritzer = cursor.fetchone()
        if not apple_spritzer:
            raise HTTPException(status_code=404, detail="apple_spritzer not found")
        return row_to_apple_spritzer(apple_spritzer)
    finally:
        conn.close()

@apple_spritzer_router.post("", response_model=Apple_Spritzer, status_code=201)
def add_apple_spritzer(apple_spritzer: Apple_Spritzer):
    """Adds a apple_spritzer (autogenerated ID). HH:MM:SS time needed!"""
    conn = get_coffee_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO apple_spritzer (
            price, order_date
            ) VALUES (?, ?)
        """, (
            apple_spritzer.price, apple_spritzer.order_date
        ))
        conn.commit()
        
        # fetch new ID
        new_id = cursor.lastrowid
        
        # fetch all data
        cursor.execute("SELECT * FROM apple_spritzer WHERE id = ?", (new_id,))
        new_apple_spritzer = cursor.fetchone()
        
        if not new_apple_spritzer:
            raise HTTPException(status_code=500, detail="Unable to add apple_spritzer")
            
        return row_to_apple_spritzer(new_apple_spritzer)
        
    except sqlite3.Error as e:
        raise HTTPException(status_code=400, detail=f"Database Error: {str(e)}")
    finally:
        conn.close()

@apple_spritzer_router.put("/{id}", response_model=Apple_Spritzer)
def update_apple_spritzer(id: int, updated_apple_spritzer: Apple_Spritzer):
    """Updates a apple_spritzer (full input necessary, HH:MM:SS time format)"""
    conn = get_coffee_connection()
    try:
        cursor = conn.cursor()
        
        # checks if apple_spritzer exists
        cursor.execute("SELECT id FROM apple_spritzer WHERE id = ?", (id,))
        if not cursor.fetchone():
            raise HTTPException(status_code=404, detail="apple_spritzer not found")
        
        # full update
        cursor.execute("""
            UPDATE apple_spritzer SET
                price =?,
                order_date=?
            WHERE id = ?
        """, (
            updated_apple_spritzer.price,
            updated_apple_spritzer.order_date,
            id  # WHERE-clause
        ))
        conn.commit()
        
        return updated_apple_spritzer
        
    except sqlite3.Error as e:
        raise HTTPException(status_code=400, detail=f"Database Error: {str(e)}")
    finally:
        conn.close()

@apple_spritzer_router.delete("/apple_spritzers/{id}", status_code=204)
def delete_apple_spritzer(id: int):
    """Deletes a specific apple_spritzer via ID"""
    conn = get_coffee_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM apple_spritzer WHERE id = ?", (id,))
        conn.commit()
    finally:
        conn.close()