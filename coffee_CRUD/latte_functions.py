from fastapi import FastAPI, HTTPException, APIRouter
from typing import List
import sqlite3

#### self made 
from helper_functions import get_coffee_connection, row_to_latte
from classes import Latte


#### connect router via API 
latte_router = APIRouter(prefix="/latte")

@latte_router.get("/lattes", response_model=List[Latte])
def get_all_lattes():
    """Returns all lattes from the database"""
    conn = get_coffee_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM latte")
        return [row_to_latte(row) for row in cursor.fetchall()]
    finally:
        conn.close()  

@latte_router.get("/lattes/{id}", response_model=Latte)
def get_latte(id: int):
    """Returns a specific latte via ID"""
    conn = get_coffee_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM latte WHERE id = ?", (id,))
        latte = cursor.fetchone()
        if not latte:
            raise HTTPException(status_code=404, detail="latte not found")
        return row_to_latte(latte)
    finally:
        conn.close()

@latte_router.post("", response_model=Latte, status_code=201)
def add_latte(latte: Latte):
    """Adds a latte (autogenerated ID). HH:MM:SS time needed!"""
    conn = get_coffee_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO latte (
            price, order_date
            ) VALUES (?, ?)
        """, (
            latte.price, latte.order_date
        ))
        conn.commit()
        
        # fetch new ID
        new_id = cursor.lastrowid
        
        # fetch all data
        cursor.execute("SELECT * FROM latte WHERE id = ?", (new_id,))
        new_latte = cursor.fetchone()
        
        if not new_latte:
            raise HTTPException(status_code=500, detail="Unable to add latte")
            
        return row_to_latte(new_latte)
        
    except sqlite3.Error as e:
        raise HTTPException(status_code=400, detail=f"Database Error: {str(e)}")
    finally:
        conn.close()

@latte_router.put("/{id}", response_model=Latte)
def update_latte(id: int, updated_latte: Latte):
    """Updates a latte (full input necessary, HH:MM:SS time format)"""
    conn = get_coffee_connection()
    try:
        cursor = conn.cursor()
        
        # checks if latte exists
        cursor.execute("SELECT id FROM latte WHERE id = ?", (id,))
        if not cursor.fetchone():
            raise HTTPException(status_code=404, detail="latte not found")
        
        # full update
        cursor.execute("""
            UPDATE latte SET
                price =?,
                order_date=?
            WHERE id = ?
        """, (
            updated_latte.price,
            updated_latte.order_date,
            id  # WHERE-clause
        ))
        conn.commit()
        
        return updated_latte
        
    except sqlite3.Error as e:
        raise HTTPException(status_code=400, detail=f"Database Error: {str(e)}")
    finally:
        conn.close()

@latte_router.delete("/lattes/{id}", status_code=204)
def delete_latte(id: int):
    """Deletes a specific latte via ID"""
    conn = get_coffee_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM latte WHERE id = ?", (id,))
        conn.commit()
    finally:
        conn.close()