from fastapi import FastAPI, HTTPException, APIRouter
from typing import List
import sqlite3

#### self made 
from helper_functions import get_coffee_connection, row_to_americano
from classes import Americano


#### connect router via API 
americano_router = APIRouter(prefix="/americano")


@americano_router.get("/americanos", response_model=List[Americano])
def get_all_americanos():
    """Returns all americanos from the database"""
    conn = get_coffee_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM americano")
        return [row_to_americano(row) for row in cursor.fetchall()]
    finally:
        conn.close()  

@americano_router.get("/americanos/{id}", response_model=Americano)
def get_americano(id: int):
    """Returns a specific americano via ID"""
    conn = get_coffee_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM americano WHERE id = ?", (id,))
        americano = cursor.fetchone()
        if not americano:
            raise HTTPException(status_code=404, detail="Americano not found")
        return row_to_americano(americano)
    finally:
        conn.close()


@americano_router.post("", response_model=Americano, status_code=201)
def add_americano(americano: Americano):
    """Adds a americano (autogenerated ID). Order date Format is YYYY-MM-DD HH:MM:SS"""
    conn = get_coffee_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO americano (
            price, order_date
            ) VALUES (?, ?)
        """, (
            americano.price, americano.order_date
        ))
        conn.commit()
        
        # fetch new ID
        new_id = cursor.lastrowid
        
        # fetch all data
        cursor.execute("SELECT * FROM americano WHERE id = ?", (new_id,))
        new_americano = cursor.fetchone()
        
        if not new_americano:
            raise HTTPException(status_code=500, detail="Unable to add americano")
            
        return row_to_americano(new_americano)
        
    except sqlite3.Error as e:
        raise HTTPException(status_code=400, detail=f"Database Error: {str(e)}")
    finally:
        conn.close()


@americano_router.put("/{id}", response_model=Americano)
def update_americano(id: int, updated_americano: Americano):
    """Updates a americano (full input necessary, HH:MM:SS time format)"""
    conn = get_coffee_connection()
    try:
        cursor = conn.cursor()
        
        # checks if americano exists
        cursor.execute("SELECT id FROM americano WHERE id = ?", (id,))
        if not cursor.fetchone():
            raise HTTPException(status_code=404, detail="americano not found")
        
        # full update
        cursor.execute("""
            UPDATE americano SET
                price =?,
                order_date=?
            WHERE id = ?
        """, (
            updated_americano.price,
            updated_americano.order_date,
            id  # WHERE-clause
        ))
        conn.commit()
        
        return updated_americano
        
    except sqlite3.Error as e:
        raise HTTPException(status_code=400, detail=f"Database Error: {str(e)}")
    finally:
        conn.close()

@americano_router.delete("/americanos/{id}", status_code=204)
def delete_americano(id: int):
    """Deletes a specific americano via ID"""
    conn = get_coffee_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM americano WHERE id = ?", (id,))
        conn.commit()
    finally:
        conn.close()