from fastapi import FastAPI, HTTPException, APIRouter
from typing import List
import sqlite3

#### self made 
from helper_functions import get_coffee_connection, row_to_lemonade
from classes import Lemonade


#### connect router via API 
lemonade_router = APIRouter(prefix="/lemonade")

@lemonade_router.get("/lemonades", response_model=List[Lemonade])
def get_all_lemonades():
    """Returns all lemonades from the database"""
    conn = get_coffee_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM lemonade")
        return [row_to_lemonade(row) for row in cursor.fetchall()]
    finally:
        conn.close()  

@lemonade_router.get("/lemonades/{id}", response_model=Lemonade)
def get_lemonade(id: int):
    """Returns a specific lemonade via ID"""
    conn = get_coffee_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM lemonade WHERE id = ?", (id,))
        lemonade = cursor.fetchone()
        if not lemonade:
            raise HTTPException(status_code=404, detail="lemonade not found")
        return row_to_lemonade(lemonade)
    finally:
        conn.close()

@lemonade_router.post("", response_model=Lemonade, status_code=201)
def add_lemonade(lemonade: Lemonade):
    """Adds a lemonade (autogenerated ID). HH:MM:SS time needed!"""
    conn = get_coffee_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO lemonade (
            price, order_date
            ) VALUES (?, ?)
        """, (
            lemonade.price, lemonade.order_date
        ))
        conn.commit()
        
        # fetch new ID
        new_id = cursor.lastrowid
        
        # fetch all data
        cursor.execute("SELECT * FROM lemonade WHERE id = ?", (new_id,))
        new_lemonade = cursor.fetchone()
        
        if not new_lemonade:
            raise HTTPException(status_code=500, detail="Unable to add lemonade")
            
        return row_to_lemonade(new_lemonade)
        
    except sqlite3.Error as e:
        raise HTTPException(status_code=400, detail=f"Database Error: {str(e)}")
    finally:
        conn.close()

@lemonade_router.put("/{id}", response_model=Lemonade)
def update_lemonade(id: int, updated_lemonade: Lemonade):
    """Updates a lemonade (full input necessary, HH:MM:SS time format)"""
    conn = get_coffee_connection()
    try:
        cursor = conn.cursor()
        
        # checks if lemonade exists
        cursor.execute("SELECT id FROM lemonade WHERE id = ?", (id,))
        if not cursor.fetchone():
            raise HTTPException(status_code=404, detail="lemonade not found")
        
        # full update
        cursor.execute("""
            UPDATE lemonade SET
                price =?,
                order_date=?
            WHERE id = ?
        """, (
            updated_lemonade.price,
            updated_lemonade.order_date,
            id  # WHERE-clause
        ))
        conn.commit()
        
        return updated_lemonade
        
    except sqlite3.Error as e:
        raise HTTPException(status_code=400, detail=f"Database Error: {str(e)}")
    finally:
        conn.close()

@lemonade_router.delete("/lemonades/{id}", status_code=204)
def delete_lemonade(id: int):
    """Deletes a specific lemonade via ID"""
    conn = get_coffee_connection()
    try:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM lemonade WHERE id = ?", (id,))
        conn.commit()
    finally:
        conn.close()